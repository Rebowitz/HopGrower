/** * */package com.hfv.hopgrower.activity;/** * @author Robert B. Andrews * RBA Internet Services, Inc. Strasburg, Virginia * Copyright 2014  All Rights Reserved */import android.content.Context;import android.os.Bundle;import android.support.v7.app.ActionBarActivity;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.AdapterView.OnItemSelectedListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ListView;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.hfv.hopgrower.R;import com.hfv.hopgrower.dbadapter.MyHopsDatabaseAdapter;import com.hfv.hopgrower.dbhelper.HopGrowerDatabaseHelper;import com.hfv.hopgrower.special.Mail;import com.hfv.hopgrower.sqlite.VarietiesDao;import com.hfv.hopgrower.sqlite.myhops.MyHops;import com.hfv.hopgrower.sqlite.myhops.MyHopsDao;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Properties;import javax.mail.Message;import javax.mail.MessagingException;import javax.mail.PasswordAuthentication;import javax.mail.Session;import javax.mail.Transport;import javax.mail.internet.InternetAddress;import javax.mail.internet.MimeMessage;import de.greenrobot.dao.query.QueryBuilder;public class MailSenderActivity extends ActionBarActivity {    TextView emailAddy;    Spinner emailSubj;    Spinner emailData;    ListView listView;    int listsize = 0;    List<String> aList;    List<HashMap<String, String>> bList;    Context mCtx;    ArrayAdapter<String> adapter;    int actionId;    @Override    public void onCreate(Bundle icicle) {        super.onCreate(icicle);        setContentView(R.layout.mail_activity);        emailAddy = (TextView) findViewById(R.id.email_addy);        emailSubj = (Spinner) findViewById(R.id.email_spin);        emailData = (Spinner) findViewById(R.id.email_data);        mCtx = getApplicationContext();//		Log.d("HopGrower","List size is: " + listsize);        aList = new ArrayList<String>();        aList = getVarietyList(mCtx);        // Instantiating an adapter to store each items        // R.layout.listview_layout defines the layout of each item        adapter = new ArrayAdapter<String>(mCtx, R.layout.mail_spinner_view, aList);        // Getting a reference to listview of main.xml layout file        emailData.setAdapter(adapter);        emailSubj.setOnItemSelectedListener(new OnItemSelectedListener() {            public void onItemSelected(AdapterView<?> parentView,                                       View selectedItemView, int position, long id) {                int selItemPos = emailSubj.getSelectedItemPosition();                switch (selItemPos) {                    case 1:                        emailData.setVisibility(View.VISIBLE);                        break;                    case 2:                    case 3:                    case 4:                        bList = getHopFieldList(mCtx, 0);//	        		adapter = new ArrayAdapter<String>(mCtx, R.layout.mail_spinner_view, bList);                        emailData.setAdapter(adapter);                        break;                    case 5:                        break;                    case 6:                        aList = getKnowledgeBaseLinks(mCtx);                    default:                        break;                }                actionId = selItemPos;            }            @Override            public void onNothingSelected(AdapterView<?> arg0) {                // TODO Auto-generated method stub            }        });        Button sendButton = (Button) findViewById(R.id.email_button);        sendButton.setOnClickListener(new View.OnClickListener() {            public void onClick(View view) {                Mail m = new Mail("reenactor.rob@gmail.com", "Zirkle1755$");//	      String[] toArr = {"rbais@rbais.com"};                 String[] toArr = new String[10];                toArr[0] = emailAddy.getText().toString();                m.setTo(toArr);                m.setFrom("HopGrowerApp");                String category = emailSubj.getSelectedItem().toString();                m.setSubject(category);                switch (actionId) {                    case 1:                        //emailData.getSe                        break;                    case 2:                    case 3:                    case 4:                        bList = getHopFieldList(mCtx, 0);                        //    		adapter = new ArrayAdapter<String>(mCtx, R.layout.mail_spinner_view, bList);                        emailData.setAdapter(adapter);                        break;                    case 5:                        break;                    case 6:                        aList = getKnowledgeBaseLinks(mCtx);                    default:                        break;                }//	      m.setSubject("This is an email sent using my Mail JavaMail wrapper from an Android device.");                 m.setBody("Woot, it works!");//	      String data = emailData.getSelectedItem().toString();                //m.setBody(data);                try {//	        m.addAttachment("/sdcard/filelocation");                     if (m.send()) {                        Toast.makeText(MailSenderActivity.this, "Email was sent successfully.", Toast.LENGTH_LONG).show();                    } else {                        Toast.makeText(MailSenderActivity.this, "Email was not sent.", Toast.LENGTH_LONG).show();                    }                } catch (Exception e) {                    //Toast.makeText(MailApp.this, "There was a problem sending the email.", Toast.LENGTH_LONG).show();                    Log.e("MailApp", "Could not send email", e);                }            }        });    }    public void SendMailTLS() {        final String username = "username@gmail.com";        final String password = "password";        Properties props = new Properties();        props.put("mail.smtp.auth", "true");        props.put("mail.smtp.starttls.enable", "true");        props.put("mail.smtp.host", "smtp.gmail.com");        props.put("mail.smtp.port", "587");        Session session = Session.getInstance(props,                new javax.mail.Authenticator() {                    protected PasswordAuthentication getPasswordAuthentication() {                        return new PasswordAuthentication(username, password);                    }                });        try {            Message message = new MimeMessage(session);            message.setFrom(new InternetAddress("from-email@gmail.com"));            message.setRecipients(Message.RecipientType.TO,                    InternetAddress.parse("to-email@gmail.com"));            message.setSubject("Testing Subject");            message.setText("Dear Mail Crawler,"                    + "\n\n No spam to my email, please!");            Transport.send(message);            System.out.println("Done");        } catch (MessagingException e) {            throw new RuntimeException(e);        }    }    public void SendMailSSL() {        Properties props = new Properties();        props.put("mail.smtp.host", "smtp.gmail.com");        props.put("mail.smtp.socketFactory.port", "465");        props.put("mail.smtp.socketFactory.class",                "javax.net.ssl.SSLSocketFactory");        props.put("mail.smtp.auth", "true");        props.put("mail.smtp.port", "465");        Session session = Session.getDefaultInstance(props,                new javax.mail.Authenticator() {                    protected PasswordAuthentication getPasswordAuthentication() {                        return new PasswordAuthentication("username", "password");                    }                });        try {            Message message = new MimeMessage(session);            message.setFrom(new InternetAddress("from@no-spam.com"));            message.setRecipients(Message.RecipientType.TO,                    InternetAddress.parse("to@no-spam.com"));            message.setSubject("Testing Subject");            message.setText("Dear Mail Crawler," +                    "\n\n No spam to my email, please!");            Transport.send(message);            System.out.println("Done");        } catch (MessagingException e) {            throw new RuntimeException(e);        }    }    private ArrayList<String> getVarietyList(Context mCtx) {        HopGrowerDatabaseHelper mDbHelper;        mDbHelper = new HopGrowerDatabaseHelper(mCtx);        mDbHelper.onCreate();//	    mDbHelper = new EstablishAppDatabase(this);//	    DaoSession daoSess = mDbHelper.getVarietiesDaoSession();        VarietiesDao varietyDao = mDbHelper.getVarietiesDaoSession();        String[] varietyNames = varietyDao.getVarietyNames();        String[] countryNames = varietyDao.getCountryNames();        mDbHelper.closeDaoSession();        listsize = varietyNames.length;//		Log.d("HopGrower","List size is: " + listsize);        ArrayList<String> aList = new ArrayList<String>();        for (int i = 0; i < listsize; i++) {            String temp = varietyNames[i] + " - " + countryNames[i];            aList.add(temp);        }        return aList;    }    private List<HashMap<String, String>> getHopFieldList(Context mCtx, int trigger) {//	private ArrayList<String> getHopFieldList(Context mCtx, int trigger){        MyHopsDatabaseAdapter mDbAdapter;//	    mDbHelper.onCreate();//	    mDbHelper = new EstablishAppDatabase(this);        mDbAdapter = new MyHopsDatabaseAdapter(mCtx);        mDbAdapter.open();        MyHopsDao mhDao = mDbAdapter.getMyHopsDaoSession();        List<HashMap<String, String>> aList = new ArrayList<HashMap<String, String>>();        int recCount = mhDao.getMHRecCount();//      Log.d("Hopgrower","mhDao count is: " + recCount);          if (recCount == 0) {            //no myhops records, throw splash screen or toast        }        QueryBuilder<MyHops> qb = mhDao.queryBuilder();        List<MyHops> myHopList = qb.list();        mDbAdapter.closeDaoSession();        listsize = myHopList.size();        Log.d("HopGrower", "List size is: " + listsize);        for (int i = 0; i < listsize; i++) {            MyHops mhObj = myHopList.get(i);            Log.d("HopGrower", "Value of subscript i is: " + i);            String theId = mhObj.getId().toString();            String theVariety = mhObj.getVariety();            String theLocation = mhObj.getLocation();            String theAcreage = mhObj.getAcreage();            String myHopString;            if (trigger == 0) {                myHopString = theVariety + " " + theLocation + " " + theAcreage + " ";            } else {                myHopString = theVariety + "\t" + theLocation + "\t" + theAcreage + "\n";            }            HashMap<String, String> hm = new HashMap<String, String>();            hm.put("theId", theId);            hm.put("theVariety", myHopString);            aList.add(hm);        }        return aList;    }    private List<String> getKnowledgeBaseLinks(Context mCtx) {        aList.clear();        return aList;    }}	