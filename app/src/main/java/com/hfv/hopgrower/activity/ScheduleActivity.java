package com.hfv.hopgrower.activity;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.os.Bundle;import android.support.v4.app.FragmentTransaction;import android.support.v7.app.ActionBarActivity;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.ListView;import android.widget.TextView;import com.hfv.hopgrower.R;import com.hfv.hopgrower.adapter.SchedulerListAdapter;import com.hfv.hopgrower.dbadapter.MyHopsDatabaseAdapter;import com.hfv.hopgrower.screens.SchedulerEventFragment;import com.hfv.hopgrower.screens.SchedulerEventFragment.Callbacks_schedulerfrag;import com.hfv.hopgrower.sqlite.myhops.Scheduler;import com.hfv.hopgrower.sqlite.myhops.SchedulerDao;import com.roomorama.caldroid.CaldroidFragment;import com.roomorama.caldroid.CaldroidListener;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.TimeZone;import java.util.regex.Matcher;import java.util.regex.Pattern;import de.greenrobot.dao.query.DeleteQuery;import de.greenrobot.dao.query.QueryBuilder;import hirondelle.date4j.DateTime;/** * @author Robert B. Andrews *         RBA Internet Services, Inc. Strasburg, Virginia *         Copyright 2014  All Rights Reserved *///onClick listeners start at line 133@SuppressLint("SimpleDateFormat")public class ScheduleActivity extends ActionBarActivity implements Callbacks_schedulerfrag {//	public class ScheduleActivity extends FragmentActivity implements Callbacks_schedulerfrag{    private boolean mTwoPane = false;    private CaldroidFragment caldroidFragment;    private CaldroidFragment dialogCaldroidFragment;    FragmentTransaction schedulerFragmentTransaction;    MyHopsDatabaseAdapter mDbAdapter;    Context mCtx;    Bundle ourBundle = new Bundle();    SchedulerEventFragment schedCalFrag;    final SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");    Date prevDate = new Date();    AlertDialog.Builder deleteEvents;    int selectedRowId = 0;    int deleteInd = 0;    long recordId = 0;    SchedulerListAdapter schedListAdapter;    ArrayList<Scheduler> dialogList;    Date tempDate;    AlertDialog delAlertDialog;    ListView lv;    private void setCustomResourceForDates() {        Calendar cal = Calendar.getInstance();        // Min date is last 7 days        cal.add(Calendar.DATE, -18);        Date blueDate = cal.getTime();        // Max date is next 7 days        cal = Calendar.getInstance();        cal.add(Calendar.DATE, 16);        Date greenDate = cal.getTime();        if (caldroidFragment != null) {            caldroidFragment.setBackgroundResourceForDate(R.color.blue, blueDate);            caldroidFragment.setBackgroundResourceForDate(R.color.green, greenDate);            caldroidFragment.setTextColorForDate(R.color.white, blueDate);            caldroidFragment.setTextColorForDate(R.color.white, greenDate);        }    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.calendar_main);        mCtx = getApplicationContext();        getSupportActionBar().setTitle(R.string.app_sched);        // Setup caldroid fragment        // **** If you want normal CaldroidFragment, use below line ****        caldroidFragment = new CaldroidFragment();        // //////////////////////////////////////////////////////////////////////        // **** This is to show customized fragment. If you want customized        // version, uncomment below line ****//		 caldroidFragment = new CaldroidSampleCustomFragment();        // Setup arguments        if (findViewById(R.id.calendarfrag) != null) {            mTwoPane = true;        }        // If Activity is created after rotation        if (savedInstanceState != null) {            caldroidFragment.restoreStatesFromKey(savedInstanceState,                    "CALDROID_SAVED_STATE");        }        // If activity is created from fresh        else {            Bundle args = new Bundle();            Calendar cal = Calendar.getInstance();            args.putInt(CaldroidFragment.MONTH, cal.get(Calendar.MONTH) + 1);            args.putInt(CaldroidFragment.YEAR, cal.get(Calendar.YEAR));            args.putBoolean(CaldroidFragment.ENABLE_SWIPE, true);            args.putBoolean(CaldroidFragment.SIX_WEEKS_IN_CALENDAR, true);            args.putBoolean(CaldroidFragment.SQUARE_TEXT_VIEW_CELL, true);            // Uncomment this to customize startDayOfWeek            // args.putInt(CaldroidFragment.START_DAY_OF_WEEK,            // CaldroidFragment.TUESDAY); // Tuesday            caldroidFragment.setArguments(args);        }        // Attach to the activity        FragmentTransaction t = getSupportFragmentManager().beginTransaction();        t.replace(R.id.calendar1, caldroidFragment);        t.commit();        if (mTwoPane) {            //load up the second fragment with schedule records            //routine must be reusable so we can use it for a portrait fragment            //so we must be able to pass in the date and have it return the fragment with the records loaded and the page            //drawn.            ourBundle.clear();            ourBundle.putLong("selectedDate", new Date().getTime());            Log.d("HopGrower", "selectedDate is " + Long.toString(ourBundle.getLong("selectedDate")));            schedCalFrag = new SchedulerEventFragment(this);  //need to send this to complete callback config            schedCalFrag.setArguments(ourBundle);            schedulerFragmentTransaction = getSupportFragmentManager().beginTransaction();            schedulerFragmentTransaction.replace(R.id.calendarfrag, schedCalFrag);            schedulerFragmentTransaction.commit();            schedCalFrag.setSelectedDate(new Date());        }        // Setup listener        final CaldroidListener listener = new CaldroidListener() {            @Override            public void onSelectDate(AdapterView<?> parent, Date date, View view) {//				view.setBackgroundColor(0x10AD5C);                Log.d("HopGrower", "Entered Caldroid Listener");                Log.d("HopGrower", "Date as passed in to the method: " + date.toString());                //need to query the db, determine if there are events covering the clicked on date and then pull the                //info and show it in a dialog./*								mDbAdapter = new MyHopsDatabaseAdapter(mCtx);				mDbAdapter.open();		        SchedulerDao schedDao = mDbAdapter.getSchedulerDaoSession();        				QueryBuilder<Scheduler> qb = schedDao.queryBuilder();								QueryBuilder.LOG_SQL=true;				QueryBuilder.LOG_VALUES=true;*/                String stringDate = android.text.format.DateFormat.format("yyy-MM-dd", date).toString();                Log.d("HopGrower", "stringDate is: " + stringDate);                tempDate = new Date();                try {                    tempDate = formatter.parse(stringDate);                } catch (ParseException e) {                    // TODO Auto-generated catch block                    e.printStackTrace();                }                dialogList = new ArrayList<Scheduler>();                dialogList = getAdapterList(tempDate);								/*								qb.where(SchedulerDao.Properties.StartDate.eq(tempDate));								List<Scheduler> schedList = qb.list();												int sizer = schedList.size();								Log.d("HopGrower","Size of scheduler record list is: " + sizer);								for(int q = 0; q < sizer; q++){					dialogList.add(schedList.get(q));									}					Log.d("HopGrower","Size of dialogList is: " + dialogList.size());*/                String tempString = "Scheduled events for " + formatter.format(date);                //now we need to load them up in a listbox                AlertDialog.Builder buildEvents = new AlertDialog.Builder(ScheduleActivity.this);                //LayoutInflater inflater = getLayoutInflater();                LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);                View dialogView = inflater.inflate(R.layout.scheduler_dialog_view, null);//				View dialogView = LayoutInflater.from(ScheduleActivity.this).inflate(R.layout.scheduler_dialog_view, parent, false);                buildEvents.setView(dialogView);                buildEvents.setIcon(R.drawable.hop_cone);                buildEvents.setTitle(tempString);                lv = (ListView) dialogView.findViewById(R.id.list);                lv.setChoiceMode(ListView.CHOICE_MODE_SINGLE);                //	SchedulerListAdapter schedListAdapter = new SchedulerListAdapter(ScheduleActivity.this,dialogList);                schedListAdapter = new SchedulerListAdapter(getApplicationContext(), dialogList);                lv.setAdapter(schedListAdapter);                lv.setOnItemClickListener(new OnItemClickListener() {                    @SuppressWarnings("rawtypes")                    @Override                    public void onItemClick(AdapterView<?> adapterView, View view, int position, long rowId) {                        TextView schedId = (TextView) view.findViewById(R.id.schedId);                        TextView delRecurr = (TextView) view.findViewById(R.id.recurrrec);                        TextView location = (TextView) view.findViewById(R.id.location);                        Log.d("HopGrower", "Listview location is: " + location);                        TextView event = (TextView) view.findViewById(R.id.event);                        TextView interval = (TextView) view.findViewById(R.id.interval);                        TextView eventOther = (TextView) view.findViewById(R.id.event_other);                        String recId = schedId.getText().toString();                        recordId = Long.parseLong(recId);                        String test = delRecurr.getText().toString();                        int testval = Integer.parseInt(test);                        selectedRowId = (int) rowId;                        AlertDialog.Builder deleteEvents = new AlertDialog.Builder(ScheduleActivity.this);                        View deleteView = LayoutInflater.from(ScheduleActivity.this).inflate(R.layout.scheduler_dialog2_view, adapterView, false);                        //interval, location, event, event_other                        TextView dv_interval = (TextView) deleteView.findViewById(R.id.interval);                        TextView dv_location = (TextView) deleteView.findViewById(R.id.location);                        TextView dv_event = (TextView) deleteView.findViewById(R.id.event);                        TextView dv_event_other = (TextView) deleteView.findViewById(R.id.event_other);                        dv_interval.setText(interval.getText());                        dv_location.setText(location.getText());                        Log.d("HopGrower", "dv_location being set to: " + location.getText().toString());                        Log.d("HopGrower", "dv_location value is: " + dv_location.getText().toString());                        dv_event.setText(event.getText());                        dv_event_other.setText(eventOther.getText());                        deleteEvents.setView(deleteView);                        deleteEvents.setTitle("Delete scheduler event");                        deleteEvents.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {                            public void onClick(DialogInterface dialog, int id) {                                // User clicked OK button                                //delete the record from the database                                //refresh the listbox or drop the row item                                deleteInd = 1;                                SchedulerDao schedDao2 = mDbAdapter.getSchedulerDaoSession();                                schedDao2.deleteByKey(recordId);                                dialogList = getAdapterList(tempDate);                                schedListAdapter = new SchedulerListAdapter(getApplicationContext(), dialogList);                                lv.setAdapter(schedListAdapter);                            }                        });                        deleteEvents.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {                            public void onClick(DialogInterface dialog, int id) {                                // User cancelled the dialog                            }                        });                        if (testval == 1) {                            deleteEvents.setNeutralButton(R.string.del_series, new DialogInterface.OnClickListener() {                                public void onClick(DialogInterface dialog, int id) {                                    // User deletes the series the dialog                                    deleteInd = 2;                                    SchedulerDao schedDao3 = mDbAdapter.getSchedulerDaoSession();                                    QueryBuilder<Scheduler> qb3 = schedDao3.queryBuilder();                                    DeleteQuery<Scheduler> schedDel = qb3.where(SchedulerDao.Properties.RecurrRec.eq(recordId)).buildDelete();                                    schedDel.executeDeleteWithoutDetachingEntities();                                    schedListAdapter.notifyDataSetChanged();                                }                            });                        }                        delAlertDialog = deleteEvents.create();                        delAlertDialog.show();                    }                }); //end lv.setOnItemClickListener												/*				  AlertDialog.Builder deleteEvents = new AlertDialog.Builder(ScheduleActivity.this);				  				  View deleteView = LayoutInflater.from(ScheduleActivity.this).inflate(R.layout.scheduler_dialog2_view, parent, false);				  				  deleteEvents.setView(deleteView);				  deleteEvents.setTitle("Delete scheduler event");				  				  deleteEvents.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {					  public void onClick(DialogInterface dialog, int id) {								  						  // User clicked OK button						  						  					  }				  });				  				  deleteEvents.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {					  public void onClick(DialogInterface dialog, int id) {						  // User cancelled the dialog						  						  						  						  					  }				  });//				  if(testval == 1){					   deleteEvents.setNeutralButton(R.string.del_series, new DialogInterface.OnClickListener() {							  public void onClick(DialogInterface dialog, int id) {								  // User deletes the series the dialog								  								  							  }						});					   //				   }				*/                buildEvents.setNegativeButton("Close", null);                AlertDialog eventsDialog = buildEvents.create();                eventsDialog.show();            } //end caldroid on select date				/* * 			(non-Javadoc) * @see com.roomorama.caldroid.CaldroidListener#onChangeMonth(int, int) */            @Override            public void onChangeMonth(int month, int year) {                //this is fired upon creation and when the month changes                //so our db query for events for the month goes here                Log.d("HopGrower", "Month of the calendar is: " + month + "--" + year);                String sd = String.valueOf(year) + "-";                String ed = String.valueOf(year) + "-";//				String theMo = "";                if (month == 12) {                    sd += String.valueOf(month) + "-01";                    ed = String.valueOf(year + 1) + "-01-01";                } else if (month > 9) {                    sd += String.valueOf(month);                    ed += String.valueOf(month + 1);                } else {                    sd += "0" + String.valueOf(month) + "-01";                    if (month == 9) {                        ed += String.valueOf(month + 1);                    } else {                        ed += "0" + String.valueOf(month + 1) + "-01";                    }                }                Log.d("HopGrower", "Start date: " + sd);                Log.d("HopGrower", "End date: " + ed);                mDbAdapter = new MyHopsDatabaseAdapter(mCtx);                mDbAdapter.open();                SchedulerDao schedDao = mDbAdapter.getSchedulerDaoSession();                QueryBuilder<Scheduler> qb = schedDao.queryBuilder();//				QueryBuilder.LOG_SQL=true;//				QueryBuilder.LOG_VALUES=true;                Date date1 = new Date();                Date date2 = new Date();                try {                    date1 = formatter.parse(sd);                    date2 = formatter.parse(ed);                } catch (ParseException e) {                    // TODO Auto-generated catch block                    e.printStackTrace();                }                qb.where(SchedulerDao.Properties.StartDate.between(date1, date2));                List<Scheduler> schedList = qb.list();                if (!schedList.isEmpty()) {                    for (int z = 0; z < schedList.size(); z++) {                        Scheduler tempSched = schedList.get(z);                        Log.d("HopGrower", "Start date: " + tempSched.getStartDate());                        Log.d("HopGrower", "End date: " + tempSched.getEndDate());                        Log.d("HopGrower", "Location: " + tempSched.getDescription());                        Log.d("HopGrower", "Event: " + tempSched.getEvent());                        Log.d("HopGrower", "Description: " + tempSched.getDescription());                        Log.d("HopGrower", "------------------------------------");                    }                }                mDbAdapter.closeDaoSession();            }            /*			@Override                        public void onLongClickDate(Date date, View view, int position, long id) {                            //need to check if there are records for this date                            //check if we are one screen or two                            //throw fragment if not selected date/position                            //display create record dialog                            DateTime today = CalendarHelper.convertDateToDateTime(new Date());                            DateTime passedDate = CalendarHelper.convertDateToDateTime(date);                            Log.d("HopGrower","onLongClickDate compare date is " + today.toString());                            Log.d("HopGrower","date from the long click is " + passedDate.toString());                //			displayAddRecDialog();                        }            */            @Override            public void onCaldroidViewCreated() {                if (caldroidFragment.getLeftArrowButton() != null) {                }            }        };        // Setup Caldroid        caldroidFragment.setCaldroidListener(listener);    }  //end on create method    private ArrayList<Scheduler> getAdapterList(Date theDate) {        mDbAdapter = new MyHopsDatabaseAdapter(mCtx);        mDbAdapter.open();        SchedulerDao schedDao = mDbAdapter.getSchedulerDaoSession();        QueryBuilder<Scheduler> qb = schedDao.queryBuilder();        QueryBuilder.LOG_SQL = true;        QueryBuilder.LOG_VALUES = true;        qb.where(SchedulerDao.Properties.StartDate.eq(theDate));        List<Scheduler> schedList = qb.list();        ArrayList<Scheduler> dialogList = new ArrayList<Scheduler>();        int sizer = schedList.size();        Log.d("HopGrower", "Size of scheduler record list is: " + sizer);        for (int q = 0; q < sizer; q++) {            dialogList.add(schedList.get(q));        }        return dialogList;    }    public class AdapterHelper {        @SuppressWarnings({"rawtypes", "unchecked"})        public void update(ArrayAdapter arrayAdapter, ArrayList<Object> listOfObject) {            arrayAdapter.clear();            for (Object object : listOfObject) {                arrayAdapter.add(object);            }        }    }    public void redoPanel2(Date qdate, String destination) {        ourBundle.putLong("selectedDate", qdate.getTime());        if (mTwoPane) {            SchedulerEventFragment hgCalFrag2 = new SchedulerEventFragment(this);  //need to send this to complete callback config            hgCalFrag2.setArguments(ourBundle);            schedulerFragmentTransaction = getSupportFragmentManager().beginTransaction();            schedulerFragmentTransaction.replace(R.id.calendarfrag, hgCalFrag2);            schedulerFragmentTransaction.commit();        } else {        }    }    /**     * Save current states of the Caldroid here     */    @Override    protected void onSaveInstanceState(Bundle outState) {        // TODO Auto-generated method stub        super.onSaveInstanceState(outState);        if (caldroidFragment != null) {            caldroidFragment.saveStatesToKey(outState, "CALDROID_SAVED_STATE");        }        if (dialogCaldroidFragment != null) {            dialogCaldroidFragment.saveStatesToKey(outState,                    "DIALOG_CALDROID_SAVED_STATE");        }    }    //SchedulerEventFragment callback    public void onCreateNewRecord(Bundle saveBundle) {        //throw the create new record dialog        Scheduler schedRecord = new Scheduler();        try {            schedRecord.setStartDate(formatter.parse(saveBundle.getString("StartDate")));            schedRecord.setEndDate(formatter.parse(saveBundle.getString("EndDate")));        } catch (ParseException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        schedRecord.setLocation(saveBundle.getString("Location"));        schedRecord.setEvent(saveBundle.getString("Event"));        schedRecord.setEventOther(saveBundle.getString("EventOther"));        schedRecord.setDescription(saveBundle.getString("Description"));        schedRecord.setRecurring(saveBundle.getInt("Recurring"));        schedRecord.setInterval(saveBundle.getInt("Interval"));        schedRecord.setRecurrRec(saveBundle.getInt("Recurrrec"));        String regex = "^\\d+";        String location = saveBundle.getString("Location");        Pattern pattern = Pattern.compile(regex);        Matcher matcher = pattern.matcher(location);        String myhopNum = "";        while (matcher.find()) {            Log.d("HopGrower", "Pattern Matcher returns: " + matcher.group());            myhopNum = matcher.group();        }        Log.d("HopGrower", "myhopnum value is: " + myhopNum);        schedRecord.setMhID(Long.parseLong(myhopNum));        Log.d("HopGrower", "MyHop_ID is: " + myhopNum.toString());        Log.d("HopGrower", saveBundle.getString("StartDate"));        Log.d("HopGrower", saveBundle.getString("EndDate"));        Log.d("HopGrower", saveBundle.getString("Location"));        Log.d("HopGrower", saveBundle.getString("Event"));        Log.d("HopGrower", "Event Other is: " + saveBundle.getString("EventOther"));        Log.d("HopGrower", "Description is: " + saveBundle.getString("Description"));        int recurr = saveBundle.getInt("Recurring");        int interval = saveBundle.getInt("Interval");        Log.d("HopGrower", "Recurring checkbox 1 = selected is: " + Integer.toString(recurr));        Log.d("HopGrower", "Radio button 012/daily/weekly/monthly is: " + Integer.toString(interval));        SchedulerDao myDao = getDBConnection();        myDao.insert(schedRecord);        //calls clear screen method in ScheduleEventFragment        schedCalFrag.clearCreateScreen();        long insertedRecId = schedRecord.getId();        schedRecord.setRecurrRec((int) insertedRecId);        myDao.update(schedRecord);        if (recurr == 1) {            //recurring record...fancy date stuff next            generateRecurringSchedEvents(schedRecord, insertedRecId);        }    }    public SchedulerDao getDBConnection() {        mDbAdapter = new MyHopsDatabaseAdapter(mCtx);        mDbAdapter.open();        SchedulerDao thisSchedDao = mDbAdapter.getSchedulerDaoSession();        return thisSchedDao;    }    public void generateRecurringSchedEvents(Scheduler schedRecord, long insertedRecId) {        //calc number of days between start date and enddate        //determine proper dates for records        //insert into db with master recurring record id        Date startdate = schedRecord.getStartDate();        Date enddate = schedRecord.getEndDate();        int interval = schedRecord.getInterval();        int intMasterRec = (int) insertedRecId;        //0,1,2 daily, weekly monthly        //hirondelle.date4j library        DateTime hstart = new DateTime(formatter.format(startdate));        DateTime hend = new DateTime(formatter.format(enddate));        int numdays = hstart.numDaysFrom(hend);        int cnt = 0;        int numMonths = 1;        do {            Scheduler newRec = schedRecord;            newRec.setRecurring(1);            newRec.setRecurrRec(intMasterRec);            if (interval < 2) {                if (interval == 0) {//daily                    cnt++;                } else if (interval == 1) {//weekly                    cnt += 7;                }            } else {//monthly                DateTime temp = hstart.plus(0, numMonths, 0, 0, 0, 0, 0, DateTime.DayOverflow.FirstDay);                cnt = hstart.numDaysFrom(temp);                numMonths++;            }            DateTime holddate = hstart.plusDays(cnt);            startdate.setTime(holddate.getMilliseconds(TimeZone.getDefault()));            newRec.setStartDate(startdate);            newRec.setEndDate(startdate);   //do not change!!! The same date goes here.            SchedulerDao newSchedDao = mDbAdapter.getSchedulerDaoSession();            newSchedDao.insert(newRec);        } while (cnt < numdays);    }}