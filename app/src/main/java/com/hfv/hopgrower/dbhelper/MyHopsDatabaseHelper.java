/** * */package com.hfv.hopgrower.dbhelper;import android.content.Context;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import android.util.Log;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;/** * @author Robert B. Andrews *         RBA Internet Services, Inc. Strasburg, Virginia *         Copyright 2014  All Rights Reserved */public class MyHopsDatabaseHelper extends SQLiteOpenHelper {    private static String DB_PATH = "/data/data/com.hfv.hopgrower/databases/";    private static String DB_NAME = "my_hops";    private SQLiteDatabase my_hops;    private final Context helperContext;    public MyHopsDatabaseHelper(Context context) {        super(context, DB_NAME, null, 3);        this.helperContext = context;        // TODO Auto-generated constructor stub    }    @Override    public void onCreate(SQLiteDatabase db) {        // TODO Auto-generated method stub    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {        // TODO Auto-generated method stub    }    /**     * Creates a empty database on the system and rewrites it with your own database.     */    public void createDataBase() throws IOException {        boolean dbExist = checkDataBase();        if (dbExist) {            //do nothing - database already exist            Log.d("HopGrower", "EstablishApp_Database -- Database exists!");        } else {            //By calling this method an empty database will be created into the default system path            //of your application so we have to overwrite that database with our database.            // this.getReadableDatabase();            try {                Log.d("HopGrower", "EstablishApp_Database -- Trying to copy database");                copyDataBase();            } catch (IOException e) {                throw new Error("Error copying database");            }        }    }    public SQLiteDatabase getDatabase() {        String myPath = DB_PATH + DB_NAME;        return SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READWRITE);    }    /**     * Check if the database already exist to avoid re-copying the file each time you open the application.     *     * @return true if it exists, false if it doesn't     */    private boolean checkDataBase() {        String myPath = DB_PATH + DB_NAME;        Boolean checkDB = false;        File f = new File(myPath);        if (f.exists()) {            checkDB = true;        }        f = null;  //send file handle to garbage collection        return checkDB;//   return checkDB != null ? true : false;    }    /**     * Copies your database from your local assets-folder to the just created empty database in the     * system folder, from where it can be accessed and handled.     * This is done by transfering bytestream.     */    private void copyDataBase() throws IOException {        //Context myContext;        //Open your local db as the input stream        Log.d("HopGrower", "DB_NAME is: " + DB_NAME);        InputStream myInput = helperContext.getAssets().open(DB_NAME);        // Path to the empty db to be created        String outFileName = DB_PATH + DB_NAME;        Log.d("HopGrower", "DB_PATH & NAME is: " + outFileName);        //Open the empty db as the output stream        OutputStream myOutput = new FileOutputStream(outFileName);        //transfer bytes from the inputfile to the outputfile        byte[] buffer = new byte[1024];        int length;        while ((length = myInput.read(buffer)) > 0) {            myOutput.write(buffer, 0, length);        }        //Close the streams        myOutput.flush();        myOutput.close();        myInput.close();    }    public synchronized void close() {        if (my_hops != null)            my_hops.close();    }}