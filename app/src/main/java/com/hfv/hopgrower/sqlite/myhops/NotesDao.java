package com.hfv.hopgrower.sqlite.myhops;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteStatement;import de.greenrobot.dao.AbstractDao;import de.greenrobot.dao.Property;import de.greenrobot.dao.internal.DaoConfig;// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT./** * DAO for table NOTES. */public class NotesDao extends AbstractDao<Notes, Long> {    public static final String TABLENAME = "NOTES";    /**     * Properties of entity Notes.<br/>     * Can be used for QueryBuilder and for referencing column names.     */    public static class Properties {        public final static Property Id = new Property(0, Long.class, "id", true, "_id");        public final static Property Title = new Property(1, String.class, "Title", false, "TITLE");        public final static Property Category = new Property(2, String.class, "Category", false, "CATEGORY");        public final static Property Body = new Property(3, String.class, "Body", false, "BODY");    }    public NotesDao(DaoConfig config) {        super(config);    }    public NotesDao(DaoConfig config, MHDaoSession daoSession) {        super(config, daoSession);    }    /**     * Creates the underlying database table.     */    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {        String constraint = ifNotExists ? "IF NOT EXISTS " : "";        db.execSQL("CREATE TABLE " + constraint + "'NOTES' (" + //                "'_id' INTEGER PRIMARY KEY ," + // 0: id                "'TITLE' TEXT," + // 1: Title                "'CATEGORY' TEXT," + // 2: Category                "'BODY' TEXT);"); // 3: Body    }    /**     * Drops the underlying database table.     */    public static void dropTable(SQLiteDatabase db, boolean ifExists) {        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTES'";        db.execSQL(sql);    }    /**     * @inheritdoc     */    @Override    protected void bindValues(SQLiteStatement stmt, Notes entity) {        stmt.clearBindings();        Long id = entity.getId();        if (id != null) {            stmt.bindLong(1, id);        }        String Title = entity.getTitle();        if (Title != null) {            stmt.bindString(2, Title);        }        String Category = entity.getCategory();        if (Category != null) {            stmt.bindString(3, Category);        }        String Body = entity.getBody();        if (Body != null) {            stmt.bindString(4, Body);        }    }    /**     * @inheritdoc     */    @Override    public Long readKey(Cursor cursor, int offset) {        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);    }    /**     * @inheritdoc     */    @Override    public Notes readEntity(Cursor cursor, int offset) {        Notes entity = new Notes( //                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Title                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Category                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // Body        );        return entity;    }    /**     * @inheritdoc     */    @Override    public void readEntity(Cursor cursor, Notes entity, int offset) {        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));        entity.setCategory(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));        entity.setBody(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));    }    /**     * @inheritdoc     */    @Override    protected Long updateKeyAfterInsert(Notes entity, long rowId) {        entity.setId(rowId);        return rowId;    }    /**     * @inheritdoc     */    @Override    public Long getKey(Notes entity) {        if (entity != null) {            return entity.getId();        } else {            return null;        }    }    /**     * @inheritdoc     */    @Override    protected boolean isEntityUpdateable() {        return true;    }}