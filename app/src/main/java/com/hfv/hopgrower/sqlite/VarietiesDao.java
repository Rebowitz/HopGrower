package com.hfv.hopgrower.sqlite;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteStatement;import java.util.ArrayList;import java.util.Arrays;import de.greenrobot.dao.AbstractDao;import de.greenrobot.dao.Property;import de.greenrobot.dao.internal.DaoConfig;// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT./** * DAO for table VARIETIES. */public class VarietiesDao extends AbstractDao<Varieties, Long> {    public static final String TABLENAME = "VARIETIES";    Cursor cursor;    /**     * Properties of entity Varieties.<br/>     * Can be used for QueryBuilder and for referencing column names.     */    public static class Properties {        public final static Property Id = new Property(0, Long.class, "id", true, "_id");        public final static Property Variety = new Property(1, String.class, "Variety", false, "VARIETY");        public final static Property Country = new Property(2, String.class, "Country", false, "COUNTRY");        public final static Property Pedigree = new Property(3, String.class, "Pedigree", false, "PEDIGREE");        public final static Property Yield = new Property(4, String.class, "Yield", false, "YIELD");        public final static Property Usage = new Property(5, String.class, "Usage", false, "USAGE");        public final static Property Aroma = new Property(6, String.class, "Aroma", false, "AROMA");        public final static Property Substitutes = new Property(7, String.class, "Substitutes", false, "SUBSTITUTES");        public final static Property BeerStyles = new Property(8, String.class, "BeerStyles", false, "BEERSTYLES");        public final static Property Info = new Property(9, String.class, "Info", false, "INFO");        public final static Property Storage = new Property(10, String.class, "Storage", false, "STORAGE");        public final static Property AA = new Property(11, String.class, "AA", false, "AA");        public final static Property BA = new Property(12, String.class, "BA", false, "BA");        public final static Property CoHum = new Property(13, String.class, "CoHum", false, "COHUM");        public final static Property TotOil = new Property(14, String.class, "TotOil", false, "TOTOIL");        public final static Property Myrcene = new Property(15, String.class, "Myrcene", false, "MYRCENE");        public final static Property Humulene = new Property(16, String.class, "Humulene", false, "HUMULENE");        public final static Property Caro = new Property(17, String.class, "Caro", false, "CARO");        public final static Property Farn = new Property(18, String.class, "Farn", false, "FARN");        public final static Property Perception = new Property(19, String.class, "Perception", false, "PERCEPTION");    }    public VarietiesDao(DaoConfig config) {        super(config);    }    public VarietiesDao(DaoConfig config, DaoSession daoSession) {        super(config, daoSession);    }    /**     * Creates the underlying database table.     */    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {        String constraint = ifNotExists ? "IF NOT EXISTS " : "";        db.execSQL("CREATE TABLE " + constraint + "'VARIETIES' (" + //                "'_id' INTEGER PRIMARY KEY ," + // 0: id                "'VARIETY' TEXT NOT NULL ," + // 1: Variety                "'COUNTRY' TEXT," + // 2: Country                "'PEDIGREE' TEXT," + // 3: Pedigree                "'YIELD' TEXT," + // 4: Yield                "'USAGE' TEXT," + // 5: Usage                "'AROMA' TEXT," + // 6: Aroma                "'SUBSTITUTES' TEXT," + // 7: Substitutes                "'BEERSTYLES' TEXT," + // 8: BeerStyles                "'INFO' TEXT," + // 9: Info                "'STORAGE' TEXT," + // 10: Storage                "'AA' TEXT NOT NULL ," + // 11: AA                "'BA' TEXT," + // 12: BA                "'COHUM' TEXT," + // 13: CoHum                "'TOTOIL' TEXT," + // 14: TotOil                "'MYRCENE' TEXT," + // 15: Myrcene                "'HUMULENE' TEXT," + // 16: Humulene                "'CARO' TEXT," + // 17: Caro                "'FARN' TEXT," + // 18: Farn                "'PERCEPTION' TEXT);"); // 19: Perception    }    /**     * Drops the underlying database table.     */    public static void dropTable(SQLiteDatabase db, boolean ifExists) {        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VARIETIES'";        db.execSQL(sql);    }    /**     * @inheritdoc     */    @Override    protected void bindValues(SQLiteStatement stmt, Varieties entity) {        stmt.clearBindings();        Long id = entity.getId();        if (id != null) {            stmt.bindLong(1, id);        }        stmt.bindString(2, entity.getVariety());        String Country = entity.getCountry();        if (Country != null) {            stmt.bindString(3, Country);        }        String Pedigree = entity.getPedigree();        if (Pedigree != null) {            stmt.bindString(4, Pedigree);        }        String Yield = entity.getYield();        if (Yield != null) {            stmt.bindString(5, Yield);        }        String Usage = entity.getUsage();        if (Usage != null) {            stmt.bindString(6, Usage);        }        String Aroma = entity.getAroma();        if (Aroma != null) {            stmt.bindString(7, Aroma);        }        String Substitutes = entity.getSubstitutes();        if (Substitutes != null) {            stmt.bindString(8, Substitutes);        }        String BeerStyles = entity.getBeerStyles();        if (BeerStyles != null) {            stmt.bindString(9, BeerStyles);        }        String Info = entity.getInfo();        if (Info != null) {            stmt.bindString(10, Info);        }        String Storage = entity.getStorage();        if (Storage != null) {            stmt.bindString(11, Storage);        }        stmt.bindString(12, entity.getAA());        String BA = entity.getBA();        if (BA != null) {            stmt.bindString(13, BA);        }        String CoHum = entity.getCoHum();        if (CoHum != null) {            stmt.bindString(14, CoHum);        }        String TotOil = entity.getTotOil();        if (TotOil != null) {            stmt.bindString(15, TotOil);        }        String Myrcene = entity.getMyrcene();        if (Myrcene != null) {            stmt.bindString(16, Myrcene);        }        String Humulene = entity.getHumulene();        if (Humulene != null) {            stmt.bindString(17, Humulene);        }        String Caro = entity.getCaro();        if (Caro != null) {            stmt.bindString(18, Caro);        }        String Farn = entity.getFarn();        if (Farn != null) {            stmt.bindString(19, Farn);        }        String Perception = entity.getPerception();        if (Perception != null) {            stmt.bindString(20, Perception);        }    }    /**     * @inheritdoc     */    @Override    public Long readKey(Cursor cursor, int offset) {        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);    }    /**     * @inheritdoc     */    @Override    public Varieties readEntity(Cursor cursor, int offset) {        Varieties entity = new Varieties( //                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id                cursor.getString(offset + 1), // Variety                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Country                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Pedigree                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Yield                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Usage                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Aroma                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Substitutes                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // BeerStyles                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Info                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Storage                cursor.getString(offset + 11), // AA                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // BA                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // CoHum                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // TotOil                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Myrcene                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // Humulene                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // Caro                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // Farn                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // Perception        );        return entity;    }    /**     * @inheritdoc     */    @Override    public void readEntity(Cursor cursor, Varieties entity, int offset) {        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));        entity.setVariety(cursor.getString(offset + 1));        entity.setCountry(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));        entity.setPedigree(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));        entity.setYield(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));        entity.setUsage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));        entity.setAroma(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));        entity.setSubstitutes(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));        entity.setBeerStyles(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));        entity.setInfo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));        entity.setStorage(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));        entity.setAA(cursor.getString(offset + 11));        entity.setBA(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));        entity.setCoHum(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));        entity.setTotOil(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));        entity.setMyrcene(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));        entity.setHumulene(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));        entity.setCaro(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));        entity.setFarn(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));        entity.setPerception(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));    }    public String[] getVarietyNames() {        //String sql = "Select Variety from Varieties order by Variety ASC";        ArrayList<String> tmpList = new ArrayList<String>();        cursor = db.rawQuery("Select Variety from Varieties order by Variety ASC", null);        if (cursor.moveToFirst()) {            do {                tmpList.add(cursor.getString(0));            } while (cursor.moveToNext());        }        //finish converting        String[] varArray = tmpList.toArray(new String[tmpList.size()]);        tmpList = null;        return varArray;    }    public String[] getCountryNames() {        String sql = "Select Country from Varieties order by Variety ASC";  //this is correct sql        ArrayList<String> countryList = new ArrayList<String>();        cursor = db.rawQuery(sql, null);        cursor.moveToFirst();        while (!cursor.isAfterLast()) {            countryList.add(cursor.getString(0));            cursor.moveToNext();        }        //finish converting        String[] varArray = countryList.toArray(new String[countryList.size()]);        countryList = null;        return varArray;    }    public String[] getVarietyData(String varietyNm, String countryNm) {        ArrayList<String> tmpList = new ArrayList<String>();        String sql = "select * from Varieties where Variety=?,Country=?";        cursor = db.rawQuery(sql, new String[]{varietyNm, countryNm});        if (cursor.moveToFirst()) {            do {                tmpList.add(cursor.getString(0));            } while (cursor.moveToNext());        }        //finish converting        String[] varArray = tmpList.toArray(new String[tmpList.size()]);        tmpList = null;        return varArray;    }    public ArrayList<String> getVarietiesArrayList() {        String[] tmpVar = getVarietyNames();        ArrayList<String> tmpArrList = new ArrayList<String>(Arrays.asList(tmpVar));        return tmpArrList;    }    /**     * @inheritdoc     */    @Override    protected Long updateKeyAfterInsert(Varieties entity, long rowId) {        entity.setId(rowId);        return rowId;    }    /**     * @inheritdoc     */    @Override    public Long getKey(Varieties entity) {        if (entity != null) {            return entity.getId();        } else {            return null;        }    }    /**     * @inheritdoc     */    @Override    protected boolean isEntityUpdateable() {        return true;    }}