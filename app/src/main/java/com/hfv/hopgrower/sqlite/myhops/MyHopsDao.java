package com.hfv.hopgrower.sqlite.myhops;import android.content.ContentValues;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteException;import android.database.sqlite.SQLiteStatement;import android.util.Log;import de.greenrobot.dao.AbstractDao;import de.greenrobot.dao.Property;import de.greenrobot.dao.internal.DaoConfig;// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT./** * DAO for table MY_HOPS. */public class MyHopsDao extends AbstractDao<MyHops, Long> {    public static final String TABLENAME = "MY_HOPS";    public static final String DATABASE_TABLE = "MY_HOPS";    public static final String KEY_DATE = "Plant_Date";    public static final String KEY_PLOT = "plot_or_plant";    public static final String KEY_VARIETY = "Variety";    public static final String KEY_LOCATION = "Location";    public static final String KEY_BINES = "Bines";    public static final String KEY_ACREAGE = "Acreage";    public static final String KEY_DENSITY = "Density";    public static final String KEY_TRELLIS = "Trellis_height";    public static final String KEY_IRRIG = "Irrigation_type";    /**     * Properties of entity MyHops.<br/>     * Can be used for QueryBuilder and for referencing column names.     */    public static class Properties {        public final static Property Id = new Property(0, Long.class, "id", true, "_id");        public final static Property Plant_Date = new Property(1, String.class, "Plant_Date", false, "PLANT_DATE");        public final static Property Plot_or_plant = new Property(2, Integer.class, "plot_or_plant", false, "PLOT_OR_PLANT");        public final static Property Variety = new Property(3, String.class, "Variety", false, "VARIETY");        public final static Property Location = new Property(4, String.class, "Location", false, "LOCATION");        public final static Property Bines = new Property(5, String.class, "Bines", false, "BINES");        public final static Property Acreage = new Property(6, String.class, "Acreage", false, "ACREAGE");        public final static Property Density = new Property(7, String.class, "Density", false, "DENSITY");        public final static Property Trellis_height = new Property(8, String.class, "Trellis_height", false, "TRELLIS_HEIGHT");        public final static Property Irrigation_type = new Property(9, String.class, "Irrigation_type", false, "IRRIGATION_TYPE");    }    public MyHopsDao(DaoConfig config) {        super(config);    }    public MyHopsDao(DaoConfig config, MHDaoSession daoSession) {        super(config, daoSession);    }    /**     * Creates the underlying database table.     */    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {        String constraint = ifNotExists ? "IF NOT EXISTS " : "";        db.execSQL("CREATE TABLE " + constraint + "'MY_HOPS' (" + //                "'_id' INTEGER PRIMARY KEY ," + // 0: id                "'PLANT_DATE' TEXT," + // 1: Plant_Date                "'PLOT_OR_PLANT' INTEGER," + // 2: plot_or_plant                "'VARIETY' TEXT," + // 3: Variety                "'LOCATION' TEXT," + // 4: Location                "'BINES' TEXT," + // 5: Bines                "'ACREAGE' TEXT," + // 6: Acreage                "'DENSITY' TEXT," + // 7: Density                "'TRELLIS_HEIGHT' TEXT," + // 8: Trellis_height                "'IRRIGATION_TYPE' TEXT);"); // 9: Irrigation_type    }    /**     * Drops the underlying database table.     */    public static void dropTable(SQLiteDatabase db, boolean ifExists) {        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MY_HOPS'";        db.execSQL(sql);    }    /**     * @inheritdoc     */    @Override    protected void bindValues(SQLiteStatement stmt, MyHops entity) {        stmt.clearBindings();        Long id = entity.getId();        if (id != null) {            stmt.bindLong(1, id);        }        String Plant_Date = entity.getPlant_Date();        if (Plant_Date != null) {            stmt.bindString(2, Plant_Date);        }        Integer plot_or_plant = entity.getPlot_or_plant();        if (plot_or_plant != null) {            stmt.bindLong(3, plot_or_plant);        }        String Variety = entity.getVariety();        if (Variety != null) {            stmt.bindString(4, Variety);        }        String Location = entity.getLocation();        if (Location != null) {            stmt.bindString(5, Location);        }        String Bines = entity.getBines();        if (Bines != null) {            stmt.bindString(6, Bines);        }        String Acreage = entity.getAcreage();        if (Acreage != null) {            stmt.bindString(7, Acreage);        }        String Density = entity.getDensity();        if (Density != null) {            stmt.bindString(8, Density);        }        String Trellis_height = entity.getTrellis_height();        if (Trellis_height != null) {            stmt.bindString(9, Trellis_height);        }        String Irrigation_type = entity.getIrrigation_type();        if (Irrigation_type != null) {            stmt.bindString(10, Irrigation_type);        }    }    /**     * @inheritdoc     */    @Override    public Long readKey(Cursor cursor, int offset) {        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);    }    /**     * @inheritdoc     */    @Override    public MyHops readEntity(Cursor cursor, int offset) {        MyHops entity = new MyHops( //                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Plant_Date                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // plot_or_plant                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Variety                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Location                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Bines                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Acreage                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Density                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Trellis_height                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // Irrigation_type        );        return entity;    }    /**     * @inheritdoc     */    @Override    public void readEntity(Cursor cursor, MyHops entity, int offset) {        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));        entity.setPlant_Date(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));        entity.setPlot_or_plant(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));        entity.setVariety(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));        entity.setLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));        entity.setBines(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));        entity.setAcreage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));        entity.setDensity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));        entity.setTrellis_height(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));        entity.setIrrigation_type(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));    }    /**     * @inheritdoc     */    @Override    protected Long updateKeyAfterInsert(MyHops entity, long rowId) {        entity.setId(rowId);        return rowId;    }    /**     * @inheritdoc     */    @Override    public Long getKey(MyHops entity) {        if (entity != null) {            return entity.getId();        } else {            return null;        }    }    /**     * @inheritdoc     */    @Override    protected boolean isEntityUpdateable() {        return true;    }    public Cursor getMHRecords() {        Cursor cursor = db.rawQuery("Select * from MY_HOPS order by _id ASC", null);        return cursor;    }    public int getMHRecCount() {        Cursor cursor = db.rawQuery("Select count(*) from MY_HOPS", null);        cursor.moveToFirst();        int recs = cursor.getInt(0);        return recs;    }    public long createMyHops(int buttonVal, String[] mhStrings) {        //order of array is        //id, year planted, variety, location, bines, acreage, density, trellis height, irrigation	/*   Log.d("HopGrower",String.valueOf(buttonVal));	   	   Log.d("HopGrower", mhStrings[0].toString());	   Log.d("HopGrower", mhStrings[1].toString());	   Log.d("HopGrower", mhStrings[2].toString());	   Log.d("HopGrower", mhStrings[3].toString());	   Log.d("HopGrower", mhStrings[4].toString());	   Log.d("HopGrower", mhStrings[5].toString());	   Log.d("HopGrower", mhStrings[6].toString());	   Log.d("HopGrower", mhStrings[7].toString());*/        ContentValues initialValues = new ContentValues();        initialValues.put(KEY_DATE, mhStrings[0].toString());        initialValues.put(KEY_PLOT, buttonVal);        initialValues.put(KEY_VARIETY, mhStrings[1].toString());        initialValues.put(KEY_LOCATION, mhStrings[2].toString());        initialValues.put(KEY_BINES, mhStrings[3].toString());        initialValues.put(KEY_ACREAGE, mhStrings[4].toString());        initialValues.put(KEY_DENSITY, mhStrings[5].toString());        initialValues.put(KEY_TRELLIS, mhStrings[6].toString());        initialValues.put(KEY_IRRIG, mhStrings[7].toString());        Long result = null;        try {            result = db.insert(DATABASE_TABLE, null, initialValues);        } catch (SQLiteException e) {            Log.e("HopGrower", "SQLite Insert", e);        }        return result;    }}