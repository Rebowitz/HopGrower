package com.hfv.hopgrower.screens;/* * Copyright (C) 2008 Google Inc. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *//** * @author Robert B. Andrews * RBA Internet Services, Inc. Strasburg, Virginia * Copyright 2014  All Rights Reserved */import android.app.Activity;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.Spinner;import android.widget.Toast;import com.hfv.hopgrower.R;import com.hfv.hopgrower.dbadapter.MyHopsDatabaseAdapter;import com.hfv.hopgrower.special.HopGrowerToast;import com.hfv.hopgrower.sqlite.myhops.Notes;import com.hfv.hopgrower.sqlite.myhops.NotesDao;import java.util.List;import de.greenrobot.dao.query.QueryBuilder;public class NotesEdit extends Activity {    private EditText mTitleText;    private EditText mBodyText;    private Spinner mCategorySpin;    private Long mRowId;    private MyHopsDatabaseAdapter mDbAdapter;    private Context mCtx;    int recId = 0;    NotesDao notesDao;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.note_edit);        mCtx = getApplicationContext();        Intent intent = getIntent();        recId = intent.getIntExtra("NoteId", 0);        mDbAdapter = new MyHopsDatabaseAdapter(mCtx);        mDbAdapter.open();        notesDao = mDbAdapter.getNotesDaoSession();        QueryBuilder<Notes> qb = notesDao.queryBuilder();        List<Notes> myNoteList = qb.where(NotesDao.Properties.Id.eq(recId)).list();        Notes theRec = myNoteList.get(0);        mDbAdapter.closeDaoSession();        setTitle(R.string.edit_note);        mTitleText = (EditText) findViewById(R.id.title);        mCategorySpin = (Spinner) findViewById(R.id.category_spinner);        mBodyText = (EditText) findViewById(R.id.body);        Button confirmButton = (Button) findViewById(R.id.confirm);        Button cancelButton = (Button) findViewById(R.id.cancel);        mTitleText.setText(theRec.getTitle());        mBodyText.setText(theRec.getBody());        String catText = theRec.getCategory();        int count = getIndex(mCategorySpin, catText);        mCategorySpin.setSelection(count);        confirmButton.setOnClickListener(new View.OnClickListener() {            public void onClick(View view) {                mTitleText = (EditText) findViewById(R.id.title);                mCategorySpin = (Spinner) findViewById(R.id.category_spinner);                mBodyText = (EditText) findViewById(R.id.body);                String title = mTitleText.getText().toString();                String category = mCategorySpin.getSelectedItem().toString();                String body = mBodyText.getText().toString();                int indicator = 0;                CharSequence text = "You must enter a title.";                if (title.equals("") || title.equals(null)) {                    text = "You must enter a title.";                    indicator++;                } else if (category.equals("Select category")) {                    text = "You must select a category.";                    //throw toast here                    indicator++;                } else if (body.equals("")) {                    text = "You must enter a note.";                    indicator++;                }                if (indicator == 1) {                    HopGrowerToast hgToast = new HopGrowerToast(mCtx, text, 6);                    Toast theToast = hgToast.getToast();                    theToast.show();                } else {                    mDbAdapter.open();                    NotesDao notesDao = mDbAdapter.getNotesDaoSession();                    Notes editRec = new Notes();                    editRec.setTitle(mTitleText.getText().toString());                    editRec.setCategory(mCategorySpin.getSelectedItem().toString());                    editRec.setBody(mBodyText.getText().toString());                    editRec.setId((long) recId);                    notesDao.update(editRec);                    mDbAdapter.closeDaoSession();                    setResult(RESULT_OK);                    finish();                }            }        });        cancelButton.setOnClickListener(new View.OnClickListener() {            public void onClick(View view) {                setResult(RESULT_OK);                finish();            }        });    }    private int getIndex(Spinner spinner, String catString) {        int index = 0;        for (int i = 0; i < spinner.getCount(); i++) {            if (spinner.getItemAtPosition(i).equals(catString)) {                index = i;            }        }        return index;    }}/*    @Override    protected void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        saveState();        outState.putSerializable(NotesDbAdapter.KEY_ROWID, mRowId);    }    @Override    protected void onPause() {        super.onPause();        saveState();    }      @Override    protected void onResume() {        super.onResume();        populateFields();    }    private void saveState() {        String title = mTitleText.getText().toString();        String category = mCategorySpin.getSelectedItem().toString();        String body = mBodyText.getText().toString();        if (mRowId == null) {            long id = mDbHelper.createNote(title, category, body);            if (id > 0) {                mRowId = id;            }        } else {            mDbHelper.updateNote(mRowId, title, category, body);        }    }*/