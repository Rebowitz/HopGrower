/** * */package com.hfv.hopgrower.screens;import android.app.Activity;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.os.Bundle;import android.support.v4.app.Fragment;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.ListView;import android.widget.TableRow;import android.widget.TextView;import com.hfv.hopgrower.R;import com.hfv.hopgrower.adapter.GrowLogListAdapter;import com.hfv.hopgrower.adapter.MyHopsSchedulerListAdapter;import com.hfv.hopgrower.dbadapter.MyHopsDatabaseAdapter;import com.hfv.hopgrower.special.GrowLogRec;import com.hfv.hopgrower.sqlite.myhops.GrowLog;import com.hfv.hopgrower.sqlite.myhops.GrowLogDao;import com.hfv.hopgrower.sqlite.myhops.MyHops;import com.hfv.hopgrower.sqlite.myhops.MyHopsDao;import com.hfv.hopgrower.sqlite.myhops.MyHopsDao.Properties;import com.hfv.hopgrower.sqlite.myhops.Scheduler;import com.hfv.hopgrower.sqlite.myhops.SchedulerDao;import java.text.DateFormat;import java.util.ArrayList;import java.util.List;import de.greenrobot.dao.query.QueryBuilder;/** * @author Robert B. Andrews *         RBA Internet Services, Inc. Strasburg, Virginia *         Copyright 2014  All Rights Reserved */public class MyHopsPanelFragment extends Fragment {    Context mCtx;    ViewGroup fragView;    Long mhRecID;    Button buttonDelete;//	Callbacks_mhpanelFrag activityCallback;//	private Callbacks mCallbacks = sDummyCallbacks;    Callbacks_mhpanelFrag activityCallback = sDummyCallbacks;    int mhRecId = 0;    /**     * The argument key for the page number this fragment represents.     */    public static final String ARG_PAGE = "page";    private int mPageNumber;    MyHopsDatabaseAdapter mDbAdapter;    String[] mhStrings;    public interface Callbacks_mhpanelFrag {        void deleteMyHopsPanel(Long recordId);    }    private static Callbacks_mhpanelFrag sDummyCallbacks = new Callbacks_mhpanelFrag() {        public void deleteMyHopsPanel(Long recordId) {        }    };    public static final MyHopsPanelFragment newInstance(int recId) {        MyHopsPanelFragment mhPanelFrag = new MyHopsPanelFragment();        Bundle bundle = new Bundle();        bundle.putInt("dbMHId", recId);        mhPanelFrag.setArguments(bundle);        return mhPanelFrag;    }    public MyHopsPanelFragment() {    }    public MyHopsPanelFragment(Callbacks_mhpanelFrag callback) {        activityCallback = callback;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        //       mPageNumber = getArguments().getInt(ARG_PAGE);        mCtx = getActivity().getApplicationContext();    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        fragView = (ViewGroup) inflater.inflate(                R.layout.mhfrag_disp, container, false);        buttonDelete = (Button) fragView.findViewById(R.id.mh_button_delete);        mhRecId = getArguments().getInt("dbMHId");        Log.d("HopGrower", "Entered Fragment onCreateView");        return fragView;    }//end create view    public void onViewCreated(View v, Bundle savedInstanceState) {        super.onViewCreated(v, savedInstanceState);//       Log.d("HopGrower","Need to access database");        final TextView id = (TextView) fragView.findViewById(R.id.recordnum);        final TextView variety = (TextView) fragView.findViewById(R.id.disp_variety);        final TextView year_planted = (TextView) fragView.findViewById(R.id.disp_yrplant);        final TextView location = (TextView) fragView.findViewById(R.id.disp_location);        TextView num_of_bines = (TextView) fragView.findViewById(R.id.disp_bines);        TextView trellis_height = (TextView) fragView.findViewById(R.id.disp_trellis_height);        TextView irrigation = (TextView) fragView.findViewById(R.id.disp_irrigation);        TextView density = (TextView) fragView.findViewById(R.id.disp_density);        TextView acreage = (TextView) fragView.findViewById(R.id.disp_acreage);        ListView schedEvents = (ListView) fragView.findViewById(R.id.schedList);        ListView growlogRecs = (ListView) fragView.findViewById(R.id.growlogList);//    	ListView notesRecs = (ListView) fragView.findViewById(R.id.notesList);        mDbAdapter = new MyHopsDatabaseAdapter(mCtx);        mDbAdapter.open();        MyHopsDao mhDao = mDbAdapter.getMyHopsDaoSession();        QueryBuilder<MyHops> qb = mhDao.queryBuilder();        List<MyHops> myHopList = qb.where(Properties.Id.eq(mhRecId)).list();        mDbAdapter.closeDaoSession();        //there should be only one record to match the recId        MyHops mhObj = myHopList.get(0);        //we should send the record number and maybe the record type(bine/hopyard) through as        //variables inside the intent call for edits, or attaching records.  That way the        //record number can be sent as a Long data type.        id.setText(mhObj.getId().toString());        year_planted.setText(mhObj.getPlant_Date());        Integer pp = mhObj.getPlot_or_plant();        variety.setText(mhObj.getVariety());        Log.d("HopGrower", "Variety is: " + mhObj.getVariety());        location.setText(mhObj.getLocation());        num_of_bines.setText(mhObj.getBines());        acreage.setText(mhObj.getAcreage());        density.setText(mhObj.getDensity());        trellis_height.setText(mhObj.getTrellis_height());        irrigation.setText(mhObj.getIrrigation_type());    	/*    	 * Based on what the plant_or_plot value is 0 or 1,    	 * we need to hide/show rows in the UI    	 * UI is set for plant, so only mods for plots is needed    	 */        if (pp == 1) {            TableRow acreTR = (TableRow) fragView.findViewById(R.id.disp_layout_acreage);            TableRow densityTR = (TableRow) fragView.findViewById(R.id.disp_layout_density);            acreTR.setVisibility(View.VISIBLE);            densityTR.setVisibility(View.VISIBLE);            TableRow binesTR = (TableRow) fragView.findViewById(R.id.disp_layout_bines);            binesTR.setVisibility(View.GONE);        }        //load up the list boxes        //need to build an list of the grow log and schedule records for the myhops record id, plus        //all of the notes.  Using previously written listview adapters.        //grow log and scheduler will come from the same DAO, notes from the google setup version        mDbAdapter.open();        SchedulerDao schedDao = mDbAdapter.getSchedulerDaoSession();        QueryBuilder<Scheduler> qb2 = schedDao.queryBuilder();        int recCount = schedDao.getSchedRecCount(mhRecId);        ArrayList<Scheduler> mySchedList = new ArrayList<Scheduler>();        if (recCount == 0) {            //no myhops records, throw splash screen or toast            Log.d("HopGrower", "NO RECORDS FOUND");            Scheduler sched = new Scheduler();            sched.setInterval(3);  //triggers "No Records" to be displayed by ScheduleListAdapter            mySchedList.add(sched);        } else {            mySchedList = (ArrayList<Scheduler>) qb2.where(SchedulerDao.Properties.MhID.eq(mhRecId))                    .orderAsc(com.hfv.hopgrower.sqlite.myhops.SchedulerDao.Properties.StartDate)                    .list();        }        mDbAdapter.closeDaoSession();        Log.d("HopGrower", "MyHopsPanelFragment: Size of mySchedList is: " + mySchedList.size());        schedEvents.setChoiceMode(ListView.CHOICE_MODE_SINGLE);        MyHopsSchedulerListAdapter schedListAdapter = new MyHopsSchedulerListAdapter(mCtx, mySchedList);        schedEvents.setAdapter(schedListAdapter);        ViewGroup.LayoutParams params = schedEvents.getLayoutParams();        //params.height=75;        params.height = 150;        params.width = ViewGroup.LayoutParams.MATCH_PARENT;        schedEvents.setLayoutParams(params);        //This sets the header GROWLOG ENTRIES for the detail page        mDbAdapter.open();        GrowLogDao glDao = mDbAdapter.getGrowLogDaoSession();        QueryBuilder<GrowLog> qb3 = glDao.queryBuilder();        List<GrowLog> myGrowLog = qb3.where(GrowLogDao.Properties.MhID.eq(mhRecId)).list();        recCount = glDao.getGLRecCount(mhRecId);        Log.d("Hopgrower", "glDao count is: " + recCount);        mDbAdapter.closeDaoSession();        ArrayList<GrowLogRec> glrecs = new ArrayList<GrowLogRec>();        if (recCount == 0) {            //no myhops records, throw splash screen or toast            Log.d("HopGrower", "NO RECORDS FOUND");            GrowLogRec glrec1 = new GrowLogRec();            glrec1.glId = "";            glrec1.date = "No Records";            glrec1.category = "";            glrec1.glDesc = "";            glrecs.add(glrec1);        } else {            int listsize = myGrowLog.size();            Log.d("HopGrower", "List size is: " + listsize);            for (int i = 0; i < listsize; i++) {                GrowLog glObj = myGrowLog.get(i);                GrowLogRec glrec2 = new GrowLogRec();                glrec2.glId = Long.toString(glObj.getId());                glrec2.date = DateFormat.getDateTimeInstance().format(glObj.getLogDate());                glrec2.category = glObj.getCategory();                glrec2.item = glObj.getItem();                glrec2.glDesc = glObj.getDescription();                glrecs.add(glrec2);            }        }//end if/else reccount        GrowLogListAdapter gladapter = new GrowLogListAdapter(mCtx, glrecs);        growlogRecs.setAdapter(gladapter);        params = growlogRecs.getLayoutParams();        //params.height=75;        params.height = 150;        params.width = ViewGroup.LayoutParams.MATCH_PARENT;        growlogRecs.setLayoutParams(params);        buttonDelete.setOnClickListener(new View.OnClickListener() {            public void onClick(View view) {                AlertDialog.Builder deleteMyHopsPanel = new AlertDialog.Builder(getActivity());                View deleteView = LayoutInflater.from(mCtx).inflate(R.layout.myhops_dialog_view, null);                //interval, location, event, event_other                TextView dv_mh_id = (TextView) deleteView.findViewById(R.id.mh_id);                TextView dv_mh_variety = (TextView) deleteView.findViewById(R.id.mh_variety);                TextView dv_mh_yr_plant = (TextView) deleteView.findViewById(R.id.mh_yr_plant);                TextView dv_mh_location = (TextView) deleteView.findViewById(R.id.mh_location);                dv_mh_id.setText(id.getText());                dv_mh_location.setText(location.getText());                dv_mh_yr_plant.setText(year_planted.getText());                dv_mh_variety.setText(variety.getText());                deleteMyHopsPanel.setView(deleteView);                deleteMyHopsPanel.setTitle("Delete MyHops Panel");                deleteMyHopsPanel.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int buttonId) {                        // User clicked OK button                        //delete the record from the database                        //remove fragment from slideview                        Long recordId = Long.parseLong(id.getText().toString());                        activityCallback.deleteMyHopsPanel(recordId);                    }                });                deleteMyHopsPanel.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int id) {                        // User cancelled the dialog                    }                });                AlertDialog deleteMyHops = deleteMyHopsPanel.create();                deleteMyHops.show();            }        });        //       Log.d("HopGrower","Like...everything should be set now dude");    } //end onViewCreated    @Override    public void onAttach(Activity activity) {        super.onAttach(activity);        if (!(activity instanceof Callbacks_mhpanelFrag)) {            throw new IllegalStateException(                    "Activity must implement fragment's callbacks.");        }        activityCallback = (Callbacks_mhpanelFrag) activity;    }    @Override    public void onDetach() {        super.onDetach();        activityCallback = sDummyCallbacks;    }    /**     * Returns the page number represented by this fragment object.     */    public int getPageNumber() {        return mPageNumber;    }}    