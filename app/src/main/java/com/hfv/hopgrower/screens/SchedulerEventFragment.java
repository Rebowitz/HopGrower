/** * */package com.hfv.hopgrower.screens;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.content.Context;import android.content.DialogInterface;import android.content.res.Resources;import android.database.Cursor;import android.os.Bundle;import android.support.v4.app.Fragment;import android.util.Log;import android.view.GestureDetector;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemSelectedListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ListView;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.hfv.hopgrower.R;import com.hfv.hopgrower.adapter.SchedulerListAdapter;import com.hfv.hopgrower.dbadapter.MyHopsDatabaseAdapter;import com.hfv.hopgrower.sqlite.myhops.MyHopsDao;import com.hfv.hopgrower.sqlite.myhops.Scheduler;import com.hfv.hopgrower.sqlite.myhops.SchedulerDao;import java.text.DateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.Date;import java.util.List;//import android.widget.CompoundButton.OnCheckedChangeListener;//import android.widget.RadioGroup.OnCheckedChangeListener;/** * @author Robert B. Andrews *         RBA Internet Services, Inc. Strasburg, Virginia *         Copyright 2014  All Rights Reserved */@SuppressLint("ValidFragment")public class SchedulerEventFragment extends Fragment {    private TextView dateText;    Context mCtx;    View fragView;    Calendar calendar;    GestureDetector gestureDetector;    Dialog dialog;    Activity activity;    EditText et1;    EditText et2;    SchedulerDao schedDao;    MyHopsDao mhDao;    MyHopsDatabaseAdapter mDbAdapter;    SchedulerListAdapter adapter;    int recCount;    Callbacks_schedulerfrag activityCallback;    Date fragDate;    Bundle theBundle;    List<Scheduler> mySchedList;    ListView lvschedList;    int year;    int month;    int day;    int yearndx;    int monthndx;    int dayndx;    int spindays;    int resetInd;    int radioInd;    String[] monthdays;    ArrayAdapter<String> adapter0;    ArrayAdapter<String> adapter1;    ArrayAdapter<String> adapter2;    Spinner listMyHops;    Spinner yearSpin1;    Spinner monthSpin1;    Spinner daySpin1;    Spinner yearSpin2;    Spinner monthSpin2;    Spinner daySpin2;    Spinner event1;    CheckBox schedRecurBox;    RadioGroup radGroup;    public SchedulerEventFragment() {    }    public SchedulerEventFragment(Callbacks_schedulerfrag callback) {        activityCallback = callback;    }    public interface Callbacks_schedulerfrag {        void onCreateNewRecord(Bundle theBundle);    }    @Override    public void onCreate(Bundle savedInstanceState) {        // load and initialize the Activity        super.onCreate(savedInstanceState);        mCtx = getActivity().getApplicationContext();        activity = getActivity();    }    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        resetInd = 0;        theBundle = this.getArguments();        fragView = inflater.inflate(R.layout.scheduler_event_frag, container, false);        //   		TextView fragTitle = (TextView) fragView.findViewById(R.id.sched_event_title);        //   		fragTitle.append(" " + formatter.format(fragDate));        lvschedList = (ListView) fragView.findViewById(R.id.eventlist);        //need to show date and then  populate screen with any scheduler records        Long longPassedDate = theBundle.getLong("selectedDate");        Date date = new Date();        date.setTime(longPassedDate);        //we now have a date for the query of the database        /**         * DATABASE CONNECTION         */        mDbAdapter = new MyHopsDatabaseAdapter(mCtx);        mDbAdapter.open();        schedDao = mDbAdapter.getSchedulerDaoSession();        MyHopsDao mhDao = mDbAdapter.getMyHopsDaoSession();        Cursor myHopsCursor = mhDao.getMHRecords();        String temp = "Select a location";        //myHops info for list box        ArrayList<String> myHopsList = new ArrayList<String>();        myHopsList.add(temp);        while (myHopsCursor.moveToNext()) {            Integer idNum = myHopsCursor.getInt(0);            String variety = myHopsCursor.getString(3);            String yrPlanted = myHopsCursor.getString(1);            String location = myHopsCursor.getString(4);            temp = idNum.toString();            temp += "--" + variety + " " + yrPlanted + " " + location;            myHopsList.add(temp);        }        myHopsCursor.close();        Calendar cal = Calendar.getInstance();        //need to convert these to spinner indexes, indexes start at 0        //but preserve the following as we might need them later        year = cal.get(Calendar.YEAR);        month = cal.get(Calendar.MONTH);        day = cal.get(Calendar.DAY_OF_MONTH);        yearndx = year - 2014;        monthndx = month;  //returns 0 for january, so no index adjust is needed, we put it here for consistency        dayndx = day - 1;        Log.d("HopGrower", "Year number is: " + year);        Log.d("HopGrower", "Month number is: " + month);        Log.d("HopGrower", "Day number is: " + day);        Log.d("HopGrower", "Year index is: " + yearndx);        Log.d("HopGrower", "Month index is: " + monthndx);        //Log.d("HopGrower","Day index is: " + day);        radGroup = (RadioGroup) fragView.findViewById(R.id.RadioGroup);        schedRecurBox = (CheckBox) fragView.findViewById(R.id.schedCheckBox);        yearSpin1 = (Spinner) fragView.findViewById(R.id.sched_start_year);        monthSpin1 = (Spinner) fragView.findViewById(R.id.sched_start_month);        daySpin1 = (Spinner) fragView.findViewById(R.id.sched_start_day);        yearSpin2 = (Spinner) fragView.findViewById(R.id.sched_end_year);        monthSpin2 = (Spinner) fragView.findViewById(R.id.sched_end_month);        daySpin2 = (Spinner) fragView.findViewById(R.id.sched_end_day);        event1 = (Spinner) fragView.findViewById(R.id.scheduler_catspin);        et1 = (EditText) fragView.findViewById(R.id.sch_event_text);        et2 = (EditText) fragView.findViewById(R.id.sch_event_text2);        listMyHops = (Spinner) fragView.findViewById(R.id.sched_myhops);        Button clearButton = (Button) fragView.findViewById(R.id.button0);        Button saveButton = (Button) fragView.findViewById(R.id.button1);//            boolean leapyear = false;//        	if ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0))) {//        		leapyear = true;//        	}        //jan, mar, may, july, aug, oct, dec have 31 days   1,3,5,7,8,10,12        //april, jun, sept, nov have 30   4,6,9,11        //feb 28, leap year in multiples of 4 from 2000  so  (year - 2000) / 4 = whole number, its a leap year        Resources res = this.getResources();        String[] array = res.getStringArray(R.array.recmonthdays);        Log.d("HopGrower", "array length is: " + array.length);        List<String> list = new ArrayList<String>();        list = Arrays.asList(array);        int listsize = list.size();        Log.d("HopGrower", "list size is: " + listsize);        ArrayList<String> daylist1 = new ArrayList<String>(list);        Log.d("HopGrower", "daylist1 length is: " + daylist1.size());        monthdays = res.getStringArray(R.array.recmonthslength);        spindays = Integer.parseInt(monthdays[monthndx]);        if (spindays != 31) {            //then there are either 28,29, or 30 days, daylist1 index starts at 0, not 1            daylist1.remove(30);        }        if (spindays < 30) {            daylist1.remove(29);        }        if (spindays < 29) {            daylist1.remove(28);        }        adapter0 = new ArrayAdapter<String>(mCtx, R.layout.sched_myhops_spinner, myHopsList);        adapter0.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);        listMyHops.setAdapter(adapter0);        adapter1 = new ArrayAdapter<String>(mCtx, android.R.layout.simple_spinner_item, daylist1);        adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);        daySpin1.setAdapter(adapter1);        adapter2 = new ArrayAdapter<String>(mCtx, android.R.layout.simple_spinner_item, daylist1);        adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);        daySpin2.setAdapter(adapter2);        yearSpin1.setSelection(yearndx);        monthSpin1.setSelection(monthndx);        daySpin1.setSelection(dayndx);        yearSpin2.setSelection(yearndx);        monthSpin2.setSelection(monthndx);        daySpin2.setSelection(dayndx);        //listeners        radGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {            public void onCheckedChanged(RadioGroup group, int checkedId) {                // find which radio button is selected                if (checkedId == R.id.radio1) {                    radioInd = 0;                    Toast.makeText(mCtx, "choice: Daily",                            Toast.LENGTH_SHORT).show();                } else if (checkedId == R.id.radio2) {                    radioInd = 1;                    Toast.makeText(mCtx, "choice: Weekly",                            Toast.LENGTH_SHORT).show();                } else {                    radioInd = 2;                    Toast.makeText(mCtx, "choice: Monthly",                            Toast.LENGTH_SHORT).show();                }            }        });        monthSpin1.setOnItemSelectedListener(new OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> arg0, View arg1,                                       int arg2, long arg3) {                Log.d("HopGrower", "entered monthSpin1.setOnItemSelectedListener");                Log.d("HopGrower", "resetInd = " + resetInd);                if (resetInd > 0) {                    resetInd--;                } else {                    yearndx = yearSpin1.getSelectedItemPosition();                    monthndx = monthSpin1.getSelectedItemPosition();                    dayndx = daySpin1.getSelectedItemPosition();                    Log.d("HopGrower", "yearndx is :" + yearndx);                    Log.d("HopGrower", "monthndx is :" + monthndx);                    Log.d("HopGrower", "dayndx is :" + dayndx);                    int spindays = Integer.parseInt(monthdays[(int) arg3]);                    ArrayList<String> temparray = new ArrayList<String>();                    for (int j = 0; j < spindays; j++) {                        String dayomonth = String.valueOf(j + 1);                        temparray.add(dayomonth);                    }                    Log.d("HopGrower", "Spindays is: " + spindays);                    dayndx = determineDayIndex(spindays, dayndx);                    adapter1 = new ArrayAdapter<String>(mCtx, android.R.layout.simple_spinner_item, temparray);                    adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);                    daySpin1.setAdapter(adapter1);                    daySpin1.setSelection(dayndx, true);                }            }            @Override            public void onNothingSelected(AdapterView<?> arg0) {                // TODO Auto-generated method stub            }        });        monthSpin2.setOnItemSelectedListener(new OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> arg0, View arg1,                                       int arg2, long arg3) {                Log.d("HopGrower", "entered monthSpin2.setOnItemSelectedListener");                Log.d("HopGrower", "resetInd = " + resetInd);                if (resetInd > 0) {                    resetInd--;                } else {                    yearndx = yearSpin1.getSelectedItemPosition();                    monthndx = monthSpin1.getSelectedItemPosition();                    dayndx = daySpin1.getSelectedItemPosition();                    int spindays = Integer.parseInt(monthdays[(int) arg3]);                    String[] temparray = new String[spindays];                    for (int j = 0; j < spindays; j++) {                        String dayomonth = String.valueOf(j + 1);                        temparray[j] = dayomonth;                    }                    Log.d("HopGrower", "Spindays is: " + spindays);                    dayndx = determineDayIndex(spindays, dayndx);                    adapter2 = new ArrayAdapter<String>(mCtx, android.R.layout.simple_spinner_item, temparray);                    adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);                    daySpin2.setAdapter(adapter2);                    daySpin2.setSelection(dayndx, true);                }            }            @Override            public void onNothingSelected(AdapterView<?> arg0) {                // TODO Auto-generated method stub                //set everything to the current date            }        });        event1.setOnItemSelectedListener(new OnItemSelectedListener() {            public void onItemSelected(AdapterView<?> arg0, View view, int arg1, long arg2) {                // TODO Auto-generated method stub                String eventString = (String) event1.getSelectedItem();                if (eventString.equals("Other")) {                    et1.setVisibility(View.VISIBLE);                } else {                    et1.setVisibility(View.INVISIBLE);                }            }            @Override            public void onNothingSelected(AdapterView<?> arg0) {                // TODO Auto-generated method stub            }        });        clearButton.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View arg0) {                // TODO Auto-generated method stub                Log.d("HopGrower", "entered clearButton.setOnItemSelectedListener");                //clearCreateScreen is also called by ScheduleActivity                clearCreateScreen();            }        });        saveButton.setOnClickListener(new OnClickListener() {            int startyr = 0;            int endyr = 0;            int startmon = 0;            int endmon = 0;            int startday = 0;            int endday = 0;            int startval = 0;            int endval = 0;            String start = "";            String end = "";            @Override            public void onClick(View arg0) {                //check to see if we have chronologically valid dates                //if year2 is greater than year1, then its a good date                String titleString = "";                String message = "";                int error = 0;                start = yearSpin1.getSelectedItem().toString();                end = yearSpin2.getSelectedItem().toString();                startyr = Integer.parseInt(start);                endyr = Integer.parseInt(end);                if (startyr > endyr) {                    //bad start year                    error = 1;                }                startmon = monthSpin1.getSelectedItemPosition();                startmon++;                if (startmon < 10) {                    start += "-0" + Integer.toString(startmon);                } else {                    start += "-" + Integer.toString(startmon);                }                endmon = monthSpin2.getSelectedItemPosition();                endmon++;                if (endmon < 10) {                    end += "-0" + Integer.toString(endmon);                } else {                    end += "-" + Integer.toString(endmon);                }                if (startyr == endyr && startmon > endmon) {                    //bad month                    error = 1;                }                //end += monthSpin2.getSelectedItem().toString();                start += "-" + daySpin1.getSelectedItem().toString();                end += "-" + daySpin2.getSelectedItem().toString();                startday = Integer.parseInt(daySpin1.getSelectedItem().toString());                endday = Integer.parseInt(daySpin2.getSelectedItem().toString());                if (startyr == endyr && startmon == endmon) {                    if (startday > endday) {                        error = 1;                    }                }                Log.d("HopGrower", "Start value is " + start);                Log.d("HopGrower", "End value is " + end);                //need to regex the - out of the string and convert to int                String regex = "-";                startval = Integer.parseInt(start.replaceAll(regex, ""));                endval = Integer.parseInt(end.replaceAll(regex, ""));                Log.d("HopGrower", "Startval value is " + startval);                Log.d("HopGrower", "Endval value is " + endval);                if (error == 0 && listMyHops.getSelectedItemPosition() > 0) {                    //need callback to activity to save record                    //and populate calendar                    Bundle saveBundle = new Bundle();                    saveBundle.putString("StartDate", start);                    saveBundle.putString("EndDate", end);                    saveBundle.putString("Location", listMyHops.getSelectedItem().toString());                    saveBundle.putString("Event", event1.getSelectedItem().toString());                    saveBundle.putString("EventOther", et1.getText().toString());                    saveBundle.putString("Description", et2.getText().toString());                    if (schedRecurBox.isChecked()) {                        saveBundle.putInt("Recurring", 1);                        saveBundle.putInt("Recurrrec", 1);                    } else {                        saveBundle.putInt("Recurring", 0);                        saveBundle.putInt("Recurrrec", 0);                    }                    saveBundle.putInt("Interval", radioInd);                    //send it to the activity to save the record and populate it into the calendar                    activityCallback.onCreateNewRecord(saveBundle);                } else {                    if (listMyHops.getSelectedItemPosition() == 0) {                        if (listMyHops.getCount() == 1) {                            titleString = "Location Error";                            message = "No hopyard locations found.  Add hopyard location in MyHops section of app.";                        } else {                            titleString = "Location error";                            message = "You must assign event to a location!";                        }                    } else {                        titleString = "Date Range Error";                        message = "Invalid date range entered!";                    }                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getActivity());                    alertDialogBuilder.setTitle(titleString);                    alertDialogBuilder.setMessage(message);                    alertDialogBuilder.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {                        public void onClick(DialogInterface dialog, int which) {                            dialog.cancel();                        }                    });                    AlertDialog alertDialog = alertDialogBuilder.create();                    alertDialog.show();                }            }        });        schedRecurBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            public void onCheckedChanged(CompoundButton arg0, boolean arg1) {                // TODO Auto-generated method stub                if (schedRecurBox.isChecked() == false) {                    radGroup.clearCheck();                }                for (int i = 0; i < radGroup.getChildCount(); i++) {                    radGroup.getChildAt(i).setEnabled(arg1);                }            }        });        return fragView;    }    public void clearCreateScreen() {        yearndx = year - 2014;        monthndx = month;  //returns 0 for january, so no index adjust is needed, we put it here for consistency        dayndx = day - 1;        Log.d("HopGrower", "day variable contains: " + day);        Log.d("HopGrower", "dayndx before method call: " + dayndx);        dayndx = determineDayIndex(spindays, dayndx);        Log.d("HopGrower", "dayndx after method call: " + dayndx);        //this keeps the dayndx updater routine from running in the spinner onSelected method        //it messes up the day displayed        resetInd = 2;        Log.d("HopGrower", "resetInd = " + resetInd);        yearSpin1.setSelection(yearndx, true);        monthSpin1.setSelection(monthndx, true);        daySpin1.setSelection(dayndx, true);        yearSpin2.setSelection(yearndx, true);        monthSpin2.setSelection(monthndx, true);        daySpin2.setSelection(dayndx, true);        listMyHops.setSelection(0);        event1.setSelection(0);        et1.setText(null);        et1.setVisibility(View.INVISIBLE);        et2.setText(null);        schedRecurBox.setChecked(false);    }    @Override    public void onViewCreated(View view, Bundle savedInstanceState) {        // TODO Auto-generated method stub        super.onViewCreated(view, savedInstanceState);    }    public void setSelectedDate(Date theDate) {        fragDate = theDate;    }    public int determineDayIndex(int spindays, int dayndx) {        if (spindays == 28 && dayndx > 28) {            dayndx = 28;        } else if (spindays == 29 && dayndx > 29) {            dayndx = 29;        } else if (spindays == 30 && dayndx > 30) {            dayndx = 30;        }        return dayndx;    }    //////////////////////////////////////////////////////    //a singleton class for displaying "No Records" or scheduler text in list box    public class SchedulerRec {        public String startdate;        public String enddate;        public String location;        public String event;        public String event_other;        public String schedDesc;        public Integer recurring;        public Integer interval;        public Integer recurrRec;        public void setRec(Scheduler schedObj) {            startdate = DateFormat.getDateTimeInstance().format(schedObj.getStartDate());            enddate = DateFormat.getDateTimeInstance().format(schedObj.getEndDate());            location = schedObj.getLocation();            event = schedObj.getEvent();            event_other = schedObj.getEventOther();            schedDesc = schedObj.getDescription();            recurring = schedObj.getRecurring();            interval = schedObj.getInterval();            recurrRec = schedObj.getRecurrRec();        }        public void setStartDate(String date) {            this.startdate = date;        }        public String getStartDate() {            return startdate;        }        public void setEndDate(String date) {            this.enddate = date;        }        public String getEndDate() {            return enddate;        }        public void setLocation(String location) {            this.location = location;        }        public String getLocation() {            return location;        }        public void setEvent(String event) {            this.event = event;        }        public String getEvent() {            return event;        }        public void setEventOther(String eventOther) {            this.event_other = eventOther;        }        public String getEventOther() {            return event_other;        }        public void setSchedDesc(String schedDesc) {            this.schedDesc = schedDesc;        }        public String getSchedDesc() {            return schedDesc;        }        public void setRecurring(Integer recurring) {            this.recurring = recurring;        }        public Integer getRecurring() {            return recurring;        }        public void setInterval(Integer interval) {            this.interval = interval;        }        public Integer getInterval() {            return interval;        }        public void setRecurrRec(Integer recurrRec) {            this.recurrRec = recurrRec;        }        public Integer getRecurrRec() {            return recurrRec;        }    }}