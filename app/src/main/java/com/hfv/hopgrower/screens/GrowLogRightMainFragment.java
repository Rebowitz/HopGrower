/** * */package com.hfv.hopgrower.screens;/** * @author Robert B. Andrews * RBA Internet Services, Inc. Strasburg, Virginia * Copyright 2014  All Rights Reserved */import android.annotation.SuppressLint;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.support.v4.app.DialogFragment;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentTransaction;import android.support.v4.app.ListFragment;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.ListView;import android.widget.TextView;import com.hfv.hopgrower.R;import com.hfv.hopgrower.activity.GrowLogActivity;import com.hfv.hopgrower.adapter.GrowLogListAdapter;import com.hfv.hopgrower.dbadapter.MyHopsDatabaseAdapter;import com.hfv.hopgrower.special.GrowLogRec;import com.hfv.hopgrower.sqlite.myhops.GrowLog;import com.hfv.hopgrower.sqlite.myhops.GrowLogDao;import com.hfv.hopgrower.sqlite.myhops.GrowLogDao.Properties;import com.hfv.hopgrower.sqlite.myhops.MHDaoSession;import java.text.DateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import de.greenrobot.dao.query.QueryBuilder;@SuppressLint({"ValidFragment", "Recycle"})public class GrowLogRightMainFragment extends ListFragment {    /*********************************************************     *     */    MHDaoSession mhDaoSess;    MyHopsDatabaseAdapter mDbAdapter;    Context mCtx;    int recCount = 0;    //	int index=0;    long mhID;    String location;    String variety;    ListView glentlv;    GrowLogListAdapter adapter;    Callbacks_rightfrag activityCallback;    HashMap<String, String> passtoactivityHashMap;    View row;    int view2delete;    String glId2delete;    List<GrowLog> myGLList;    List<HashMap<String, String>> aList;    public GrowLogRightMainFragment() {    }    public GrowLogRightMainFragment(Callbacks_rightfrag callback) {        activityCallback = callback;    }    private static final String STATE_ACTIVATED_POSITION = "activated_position";    private int mActivatedPosition = ListView.INVALID_POSITION;    public interface Callbacks_rightfrag {        void rightFragOnItemSelected(String selectedMHId);    }//	Callbacks_rightfrag cbRightFrag;    public int getShownIndex() {        return getArguments().getInt("dbMHId", 0);    }    // The system calls this when it's time for the fragment to draw its    // user interface for the first time. To draw a UI for your fragment,    // you must return a View from this method that is the root of your    // fragment's layout. You can return null if the fragment does not    // provide a UI.    // We create the UI with a listview and text and return a reference to    // the listview which is then drawn to the screen    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        Bundle args = getArguments();        mhID = args.getLong("dbMHId");//		    variety = args.getString("variety");//		    location = args.getString("location");        // programmatically create a listview and for the entries in        // the container/fragment layout.        //pull the entries from the db and load up the list view        mCtx = getActivity().getApplicationContext();        mDbAdapter = new MyHopsDatabaseAdapter(mCtx);        mDbAdapter.open();        GrowLogDao glDao = mDbAdapter.getGrowLogDaoSession();        recCount = glDao.getGLRecCount(mhID);        Log.d("Hopgrower", "glDao count is: " + recCount);        ArrayList<GrowLogRec> glrecs = new ArrayList<GrowLogRec>();        if (recCount == 0) {            //no myhops records, throw splash screen or toast            Log.d("HopGrower", "NO RECORDS FOUND");            GrowLogRec glrec1 = new GrowLogRec();            glrec1.glId = "";            glrec1.date = "No Records";            glrec1.category = "";            glrec1.glDesc = "";            glrecs.add(glrec1);        } else {            QueryBuilder<GrowLog> qb = glDao.queryBuilder();            myGLList = qb.where(Properties.MhID.eq(mhID)).list();            mDbAdapter.closeDaoSession();            //This sets the header GROWLOG ENTRIES for the detail page            int listsize = myGLList.size();            Log.d("HopGrower", "List size is: " + listsize);            for (int i = 0; i < listsize; i++) {                GrowLog glObj = myGLList.get(i);                GrowLogRec glrec2 = new GrowLogRec();                glrec2.glId = Long.toString(glObj.getId());                glrec2.date = DateFormat.getDateTimeInstance().format(glObj.getLogDate());                glrec2.category = glObj.getCategory();                glrec2.item = glObj.getItem();                glrec2.glDesc = glObj.getDescription();                glrecs.add(glrec2);            }        }//end if/else reccount        adapter = new GrowLogListAdapter(getActivity().getBaseContext(), glrecs);        setListAdapter(adapter);    } //end onCreate        @Override    public void onViewCreated(View view, Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        if (savedInstanceState != null && savedInstanceState.containsKey(STATE_ACTIVATED_POSITION)) {            setActivatedPosition(savedInstanceState                    .getInt(STATE_ACTIVATED_POSITION));        }        setActivateOnItemClick(true);        glentlv = this.getListView();//		glentlv.setPadding(10, 10, 10, 10);		           glentlv.setDivider(getResources().getDrawable((R.drawable.list_divider_hopcolor)));        glentlv.setHeaderDividersEnabled(true);        glentlv.setFooterDividersEnabled(true);        glentlv.setDividerHeight(3);        glentlv.setSelector(R.drawable.list_item_selector);        glentlv.setBackgroundResource(R.drawable.text_border);        //setting button to original state, we might be here because of a backpressed button        ((GrowLogActivity) getActivity()).setButton();        getListView().setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {            @Override            public boolean onItemLongClick(AdapterView<?> adapterView, View view,                                           int position, long id) {                //this needs setActivateOnItemClick set to true, line of code above listener                row = view;                row.setBackgroundColor(0xFFAAFFEE);                TextView glId = (TextView) row.findViewById(R.id.glID);                glId2delete = glId.getText().toString();                Log.d("HopGrower", "Growlog glId2delete text is: " + glId2delete);                view2delete = position;                showDialog();                return false;            }        });    }    void showDialog() {        // DialogFragment.show() will take care of adding the fragment        // in a transaction.  We also want to remove any currently showing        // dialog, so make our own transaction and take care of that here.        FragmentTransaction ft = getFragmentManager().beginTransaction();        Fragment prev = getFragmentManager().findFragmentByTag("dialog");        if (prev != null) {            ft.remove(prev);        }        ft.addToBackStack(null);        ft.commit();        // Create and show the dialog.        DialogFragment newFragment = new GrowLogDialogFragment();        newFragment.setTargetFragment(this, 1);        newFragment.show(getFragmentManager().beginTransaction(), "dialog");    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        if (resultCode == Activity.RESULT_OK) {            //this actually means delete the selected record            //so we get the selected item glID            //delete the record in the dbase            //call onCreateView            mDbAdapter = new MyHopsDatabaseAdapter(mCtx);            mDbAdapter.open();            GrowLogDao glDao = mDbAdapter.getGrowLogDaoSession();            Log.d("HopGrower", "Looking for record in db");            int listsize = myGLList.size();            for (int i = 0; i < listsize; i++) {                GrowLog glObj = myGLList.get(i);                if (glId2delete.equals(Long.toString(glObj.getId()))) {                    Log.d("HopGrower", "Deleting");                    Log.d("HopGrower", Long.toString(glObj.getId()));                    Log.d("HopGrower", glId2delete);                    glDao.delete(glObj);                    adapter.remove(adapter.getItem(view2delete));                    adapter.notifyDataSetChanged();                    break;                }            }        } else if (resultCode == Activity.RESULT_CANCELED) {            //set item background color back to normal            row.setBackgroundColor(0xFF01DA5C);        }    }    public void refreshListView() {        adapter.notifyDataSetChanged();    }    @Override    public void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        if (mActivatedPosition != ListView.INVALID_POSITION) {            outState.putInt(STATE_ACTIVATED_POSITION, mActivatedPosition);        }    }    public void setActivateOnItemClick(boolean activateOnItemClick) {        getListView().setChoiceMode(                activateOnItemClick ? ListView.CHOICE_MODE_SINGLE                        : ListView.CHOICE_MODE_NONE);    }    private void setActivatedPosition(int position) {        if (position == ListView.INVALID_POSITION) {            getListView().setItemChecked(mActivatedPosition, false);        } else {            getListView().setItemChecked(position, true);        }        mActivatedPosition = position;    }    public void onPause() {        super.onPause();    }    public HashMap<String, String> getPassHM() {        return passtoactivityHashMap;    }}